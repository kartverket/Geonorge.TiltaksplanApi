// <auto-generated />
using System;
using Geonorge.TiltaksplanApi.Infrastructure.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Geonorge.TiltaksplanApi.Infrastructure.Migrations
{
    [DbContext(typeof(ActionPlanContext))]
    [Migration("20201018174936_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.ActionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TrafficLight")
                        .HasColumnType("int");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ActionPlans");
                });

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.ActionPlanTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Results")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionPlanId");

                    b.HasIndex("LanguageCulture");

                    b.ToTable("ActionPlanTranslations");
                });

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImplementationEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImplementationStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionPlanId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.ActivityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("LanguageCulture");

                    b.ToTable("ActivityTranslations");
                });

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.Language", b =>
                {
                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Culture");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.ActionPlanTranslation", b =>
                {
                    b.HasOne("Geonorge.TiltaksplanApi.Domain.Models.ActionPlan", null)
                        .WithMany("Translations")
                        .HasForeignKey("ActionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geonorge.TiltaksplanApi.Domain.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCulture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.Activity", b =>
                {
                    b.HasOne("Geonorge.TiltaksplanApi.Domain.Models.ActionPlan", null)
                        .WithMany("Activities")
                        .HasForeignKey("ActionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.ActivityTranslation", b =>
                {
                    b.HasOne("Geonorge.TiltaksplanApi.Domain.Models.Activity", null)
                        .WithMany("Translations")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geonorge.TiltaksplanApi.Domain.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageCulture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geonorge.TiltaksplanApi.Domain.Models.Participant", b =>
                {
                    b.HasOne("Geonorge.TiltaksplanApi.Domain.Models.Activity", null)
                        .WithMany("Participants")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
